) %>%
mutate(log_avg_hrly_earn = log(avg_hrly_earn) - lag(log(avg_hrly_earn)),
g_avg_hrly_earn = log(avg_hrly_earn) - lag(log(avg_hrly_earn)),
log_cc_loans = log(cc_loans) - lag(log(cc_loans)),
g_cc_loans = log(cc_loans) - lag(log(cc_loans)),
log_lab_partn = log(lab_partn) - lag(log(lab_partn)),
g_lab_partn = log(lab_partn) - lag(log(lab_partn)),
log_home_price_index = log(home_price_index) - lag(log(home_price_index)),
g_home_price_index = log(home_price_index) - lag(log(home_price_index)),
log_cpi_cars = log(cpi_cars) - lag(log(cpi_cars)),
g_cpi_cars = log(cpi_cars) - lag(log(cpi_cars)),
log_euro_fx = log(euro_fx) - lag(log(euro_fx)),
g_euro_fx = log(euro_fx) - lag(log(euro_fx)),
log_uk_fx = log(uk_fx) - lag(log(uk_fx)),
g_uk_fx = log(uk_fx) - lag(log(uk_fx)),
log_crude_oil = log(crude_oil) - lag(log(crude_oil)),
g_crude_oil = log(crude_oil) - lag(log(crude_oil)),
log_num_eployees = log(num_eployees) - lag(log(num_eployees)),
g_num_eployees = log(num_eployees) - lag(log(num_eployees)),
log_pcon_exp_excl_FE = log(pcon_exp_excl_FE) - lag(log(pcon_exp_excl_FE)),
g_pcon_exp_excl_FE = log(pcon_exp_excl_FE) - lag(log(pcon_exp_excl_FE)),
log_prsnl_saving_rate = log(prsnl_saving_rate) - lag(log(prsnl_saving_rate)),
g_prsnl_saving_rate = log(prsnl_saving_rate) - lag(log(prsnl_saving_rate)),
log_vehicle_sales = log(vehicle_sales) - lag(log(vehicle_sales)),
g_vehicle_sales = log(vehicle_sales) - lag(log(vehicle_sales)),
log_cons_sent = log(cons_sent) - lag(log(cons_sent)),
g_cons_sent = log(cons_sent) - lag(log(cons_sent)),
log_unemp_rate = log(unemp_rate) - lag(log(unemp_rate)),
g_unemp_rate = log(unemp_rate) - lag(log(unemp_rate))
)
macro_monthly %>%
ggplot() +
geom_line(aes(x = date, y = unemp_rate))
macro_monthly %>%
ggplot() +
geom_line(aes(x = date, y = log(unemp_rate) - lag(log(unemp_rate))))
# Variables to leave in levels:
# recession_ind, cons_sent, unemp_rate,
# Variables to transform into growth rates:
# g_cc_loans, g_avg_hrly_earn, g_lab_partn,
# g_home_price_index, cpi_cars, g_euro_fx,
# g_crude_oil, g_num_eployees, g_pcon_exp_excl_FE,
# g_prsnl_saving_rate, g_vehicle_sales,
# g_cons_sent, g_unemp_rate,
#-------------------------------------------------------------------------------
# Macroeconomic data measured at weekly frequency
# Convert by aggregation: taking average of weekly data by quarter.
#-------------------------------------------------------------------------------
macro_weekly <- readxl::read_excel("data/Earnings1.xls", sheet = "Weekly,_Ending_Friday") %>%
filter(year(DATE) >= beg_year) %>%
mutate(cal_YQ = paste(year(DATE), quarter(DATE), sep = "_")) %>%
group_by(cal_YQ) %>%
summarize(date = lubridate::ymd(last(DATE)),
fin_cond_index = mean(NFCI))
macro_weekly %>%
ggplot() +
geom_line(aes(x = date, y = fin_cond_index))
# Appears stationary, with one big spike during the financial crisis.
# No transformation necessary.
# Also, log transformation not valid, since conditions can be negative
# (ironically, when not in recession).
################################################################################
# Data Preparation
################################################################################
#-------------------------------------------------------------------------------
# Transform earnings to real dollars.
# and join data sources
#-------------------------------------------------------------------------------
# Initial CPI.
cpi_ref <- first(macro_quarterly$cpi_tot)
# First join macro data for CPI deflator.
# Adjust for inflation and take growth rates
# along with the first four lags of each.
full_data <- twdc_data %>%
left_join(macro_quarterly, by = c("cal_YQ")) %>%
# Adjust for inflation.
mutate(r_revenue = cpi_ref * revenue / cpi_tot,
r_oi = cpi_ref * total_segment_oi / cpi_tot,
r_fcf = cpi_ref * fcf / cpi_tot,
# Take logs, growth rates (and 4 lags).
log_r_revenue = log(r_revenue),
g_r_revenue = log(r_revenue) - lag(log(r_revenue)),
g_r_revenue_l1 = lag(g_r_revenue),
g_r_revenue_l2 = lag(g_r_revenue, 2),
g_r_revenue_l3 = lag(g_r_revenue, 3),
g_r_revenue_l4 = lag(g_r_revenue, 4),
log_r_oi = log(r_oi),
g_r_oi = log(r_oi) - lag(log(r_oi)),
g_r_oi_l1 = lag(g_r_oi),
g_r_oi_l2 = lag(g_r_oi, 2),
g_r_oi_l3 = lag(g_r_oi, 3),
g_r_oi_l4 = lag(g_r_oi, 4),
# Take differences of fcf (and 4 lags).
g_r_fcf = r_fcf - lag(r_fcf),
g_r_fcf_l1 = lag(g_r_fcf),
g_r_fcf_l2 = lag(g_r_fcf, 2),
g_r_fcf_l3 = lag(g_r_fcf, 3),
g_r_fcf_l4 = lag(g_r_fcf, 4)
) %>%
left_join(macro_quarterly_end, by = c("cal_YQ"))  %>%
left_join(macro_monthly, by = c("cal_YQ")) %>%
left_join(macro_weekly, by = c("cal_YQ"))
colnames(full_data)
summary(full_data)
full_data %>%
ggplot() +
geom_line(aes(x = date, y = g_r_revenue))
################################################################################
# Estimate coefficients for IRF by Linear Projections
# Plot IRFs within a loop
################################################################################
#-------------------------------------------------------------------------------
# List of available variables
#-------------------------------------------------------------------------------
# Variables to leave in levels:
# hh_debt_svc_pct
#
# recession_ind, cons_sent, unemp_rate,
#
# fin_cond_index,
# Variables to transform into growth rates:
# g_r_gdp_pc, g_ind_prodn, g_r_disp_inc,
# g_real_earnings, g_r_pcon_exp, g_hh_debt_svc_pct
#
# g_delinq_rate_ccard, g_delinq_rate_mort,
#
# g_cc_loans, g_avg_hrly_earn, g_lab_partn,
# g_home_price_index, cpi_cars, g_euro_fx, g_uk_fx,
# g_crude_oil, g_num_eployees, g_pcon_exp_excl_FE,
# g_prsnl_saving_rate, g_vehicle_sales,
# g_cons_sent, g_unemp_rate,
# Plot all IRFs within a Loop.
LHS_var_name_list <- c('revenue', 'oi')
RHS_var_name_list <- c(
# Economic Conditions.
"log_r_gdp_pc",
# "g_r_gdp_pc",
"log_ind_prodn",
# "g_ind_prodn",
"log_r_pcon_exp",
# "g_r_pcon_exp",
"recession_ind",
"fin_cond_index",
"cons_sent",
"log_cons_sent",
# "g_cons_sent",
"unemp_rate",
"log_unemp_rate",
# "g_unemp_rate",
# Wages and Labor Market Participation.
"log_real_earnings",
# "g_real_earnings",
"log_r_disp_inc",
# "g_r_disp_inc",
"log_avg_hrly_earn",
# "g_avg_hrly_earn",
"log_lab_partn",
# "g_lab_partn",
"log_num_eployees",
# "g_num_eployees",
# Credit Usage and Credit Availability.
"hh_debt_svc_pct",
"log_hh_debt_svc_pct",
# "g_hh_debt_svc_pct",
"log_cc_loans",
# "g_cc_loans",
"log_prsnl_saving_rate",
# "g_prsnl_saving_rate",
"log_delinq_rate_ccard",
# "g_delinq_rate_ccard",
"log_delinq_rate_mort",
# "g_delinq_rate_mort",
"log_home_price_index",
# "g_home_price_index",
# Commodity Prices.
"log_crude_oil",
# "g_crude_oil",
"cpi_cars",
"log_euro_fx",
# "g_euro_fx",
"log_uk_fx" # ,
# "g_uk_fx"
)
RHS_title_list <- c(
# Economic Conditions.
"Log. of Real GDP per Capita",
# "Growth in Real GDP per Capita",
"Log. of Industrial Production",
# "Growth in Industrial Production",
"Log. of Real Personal Consumption Expenditures",
# "Growth in Real Personal Consumption Expenditures",
"Recession Index",
"Financial Conditions",
"Consumer Sentiment",
"Log. of Consumer Sentiment",
# "Growth in Consumer Sentiment",
"Unemployment Rate",
"Log. of Unemployment Rate",
# "Growth in Unemployment Rate",
# Wages and Labor Market Participation.
"Log. of Real Earnings",
# "Growth in Real Earnings",
"Log. of Real Disposable Income",
# "Growth in Real Disposable Income",
"Log. of Average Hourly Earnings",
# "Growth in Average Hourly Earnings",
"Log. of Labor Participation",
# "Growth in Labor Participation",
"Log. of Number of Employees",
# "Growth in Number of Employees",
# Credit Usage and Credit Availability.
"Household Debt Service Percentage",
"Log. of Household Debt Service Percentage",
# "Growth in Household Debt Service Percentage",
"Log. of Credit-Card Loans",
# "Growth in Credit-Card Loans",
"Log. of Personal Savings Rate",
# "Growth in Personal Savings Rate",
"Log. of Credit-Card Delinquency",
# "Growth in Credit-Card Delinquency",
"Log. of Mortgage Delinquency",
# "Growth in Mortgage Delinquency",
"Log. of Home Price Index",
# "Growth in Home Price Index",
# Commodity Prices.
"Log. of Crude Oil Price",
# "Growth in Crude Oil Price",
"Log. of CPI for Cars",
# "Growth in CPI for Cars",
"Log. of Euro FX Rate",
# "Growth in Euro FX Rate",
"Log. of UK FX Rate" # ,
# "Growth in UK FX Rate"
)
RHS_var_df <- data.frame(RHS_var_name = RHS_var_name_list,
RHS_title = RHS_title_list)
RHS_var_df
source("twdc_earnings/IRF_tools.R")
# One loop with full dataset.
plot_irf_loops(full_data, LHS_var_name_list, RHS_var_df,
fig_suffix = "_full")
# LHS_var_name_list <- c('revenue', 'oi')
LHS_var_name_list <- c('revenue')
RHS_var_name_list <- c(
# Economic Conditions.
"log_r_gdp_pc",
# "g_r_gdp_pc",
"log_ind_prodn",
# "g_ind_prodn",
"log_r_pcon_exp",
# "g_r_pcon_exp",
"recession_ind",
"fin_cond_index",
"cons_sent",
"log_cons_sent",
# "g_cons_sent",
"unemp_rate",
"log_unemp_rate",
# "g_unemp_rate",
# Wages and Labor Market Participation.
"log_real_earnings",
# "g_real_earnings",
"log_r_disp_inc",
# "g_r_disp_inc",
"log_avg_hrly_earn",
# "g_avg_hrly_earn",
"log_lab_partn",
# "g_lab_partn",
"log_num_eployees",
# "g_num_eployees",
# Credit Usage and Credit Availability.
"hh_debt_svc_pct",
"log_hh_debt_svc_pct",
# "g_hh_debt_svc_pct",
"log_cc_loans",
# "g_cc_loans",
"log_prsnl_saving_rate",
# "g_prsnl_saving_rate",
"log_delinq_rate_ccard",
# "g_delinq_rate_ccard",
"log_delinq_rate_mort",
# "g_delinq_rate_mort",
"log_home_price_index",
# "g_home_price_index",
# Commodity Prices.
"log_crude_oil",
# "g_crude_oil",
"cpi_cars",
"log_euro_fx",
# "g_euro_fx",
"log_uk_fx" # ,
# "g_uk_fx"
)
RHS_title_list <- c(
# Economic Conditions.
"Log. of Real GDP per Capita",
# "Growth in Real GDP per Capita",
"Log. of Industrial Production",
# "Growth in Industrial Production",
"Log. of Real Personal Consumption Expenditures",
# "Growth in Real Personal Consumption Expenditures",
"Recession Index",
"Financial Conditions",
"Consumer Sentiment",
"Log. of Consumer Sentiment",
# "Growth in Consumer Sentiment",
"Unemployment Rate",
"Log. of Unemployment Rate",
# "Growth in Unemployment Rate",
# Wages and Labor Market Participation.
"Log. of Real Earnings",
# "Growth in Real Earnings",
"Log. of Real Disposable Income",
# "Growth in Real Disposable Income",
"Log. of Average Hourly Earnings",
# "Growth in Average Hourly Earnings",
"Log. of Labor Participation",
# "Growth in Labor Participation",
"Log. of Number of Employees",
# "Growth in Number of Employees",
# Credit Usage and Credit Availability.
"Household Debt Service Percentage",
"Log. of Household Debt Service Percentage",
# "Growth in Household Debt Service Percentage",
"Log. of Credit-Card Loans",
# "Growth in Credit-Card Loans",
"Log. of Personal Savings Rate",
# "Growth in Personal Savings Rate",
"Log. of Credit-Card Delinquency",
# "Growth in Credit-Card Delinquency",
"Log. of Mortgage Delinquency",
# "Growth in Mortgage Delinquency",
"Log. of Home Price Index",
# "Growth in Home Price Index",
# Commodity Prices.
"Log. of Crude Oil Price",
# "Growth in Crude Oil Price",
"Log. of CPI for Cars",
# "Growth in CPI for Cars",
"Log. of Euro FX Rate",
# "Growth in Euro FX Rate",
"Log. of UK FX Rate" # ,
# "Growth in UK FX Rate"
)
RHS_var_df <- data.frame(RHS_var_name = RHS_var_name_list,
RHS_title = RHS_title_list)
RHS_var_df
source("twdc_earnings/IRF_tools.R")
# One loop with full dataset.
plot_irf_loops(full_data, LHS_var_name_list, RHS_var_df,
fig_suffix = "_full")
full_data
# One loop with partial dataset, excluding covid and post-covid period.
plot_irf_loops(full_data %>% filter(data <= '2019-12-31'),
LHS_var_name_list, RHS_var_df,
fig_suffix = "_no_covid")
plot_irf_loops(full_data %>% filter(date <= '2019-12-31'),
LHS_var_name_list, RHS_var_df,
fig_suffix = "_no_covid")
full_data
rm(list=ls(all=TRUE))
# Load required libraries.
# library(name_of_R_package)
library(tidyverse)
c(1, 2, 3) %>% sum()
seq(1, 10) %>% summary()
# You can chain multiple operations.
0 %>% log()
1 %>% log()
log(1)
# and
1 %>% log() %>% exp()
# and
7 %>% log() %>% exp()
# because exp() and log() are inverses of each other.
exp(log(7))
log(exp(7))
# because exp() and log() are inverses of each other.
exp(log(42))
log(exp(103))
read_xlsx("tractor_data.xlsx", sheet = "Sales") %>%
summary()
read_xlsx("tractor_data.xlsx", sheet = "Sales")
library(readxl)
read_xlsx("tractor_data.xlsx", sheet = "Sales") %>%
summary()
read_xlsx("tractor_data.xlsx", sheet = "Sales")
setwd("~/GitHub/QMB6316F24/demo_14_tidyverse")
setwd("~/UCF/UCF_PMBA_BA/QMB6316F24/demo_14_tidyverse")
read_xlsx("tractor_data.xlsx", sheet = "Sales") %>%
summary()
tractor_sales <- read_xlsx("tractor_data.xlsx", sheet = "Sales")
# Inspect the contents.
summary(tractor_sales)
# Use all available variables from first dataset.
colnames(tractor_sales)
# Estimate a regression model.
lm_model_0 <- lm(data = tractor_sales,
formula = log(saleprice) ~ age + enghours +
johndeere +
spring + summer + winter)
# Output the results to screen.
summary(lm_model_0)
tractor_data <- read_xlsx("tractor_data.xlsx", sheet = "Sales")
# Inspect the contents.
summary(tractor_data)
# Use all available variables from first dataset.
colnames(tractor_data)
# Estimate a regression model.
lm_model_0 <- lm(data = tractor_data,
formula = log(saleprice) ~ age + enghours +
johndeere +
spring + summer + winter)
# Output the results to screen.
summary(lm_model_0)
# This time, read and join the data in one operation.
tractor_data <- read_xlsx("tractor_data.xlsx", sheet = "Sales") %>%
left_join(read_xlsx("tractor_data.xlsx", sheet = "Specs"))
# Use all available variables from full dataset.
colnames(tractor_data)
# Estimate a regression model.
lm_model_1 <- lm(data = tractor_data,
formula = log(saleprice) ~ horsepower + age + enghours +
diesel + fwd + manual + johndeere +
spring + summer + winter)
# Output the results to screen.
summary(lm_model_1)
# This time, read and join the data in one operation.
tractor_data <- read_xlsx("tractor_data.xlsx", sheet = "Sales") %>%
left_join(read_xlsx("tractor_data.xlsx", sheet = "Specs")) %>%
left_join(read_xlsx("tractor_data.xlsx", sheet = "Cabs"))
# Verify that the data were joined correctly.
summary(tractor_data)
# use the mutate command to replace the cab variable with a proper indicator.
tractor_data <- read_xlsx("tractor_data.xlsx", sheet = "Sales") %>%
left_join(read_xlsx("tractor_data.xlsx", sheet = "Specs")) %>%
left_join(read_xlsx("tractor_data.xlsx", sheet = "Cabs")) %>%
mutate(cab_orig = cab,
cab = ifelse(cab == 1, 1, 0))
# Verify *again* that the data were joined correctly this time.
summary(tractor_data)
# use the mutate command to replace the cab variable with a proper indicator.
tractor_data <- read_xlsx("tractor_data.xlsx", sheet = "Sales") %>%
left_join(read_xlsx("tractor_data.xlsx", sheet = "Specs")) %>%
left_join(read_xlsx("tractor_data.xlsx", sheet = "Cabs")) %>%
mutate(cab_orig = cab,
cab = ifelse(is.na(cab), 0, cab))
# Verify *again* that the data were joined correctly this time.
summary(tractor_data)
# Verify *again* that the data were joined correctly this time.
summary(tractor_data)
# Use all available variables from full dataset.
colnames(tractor_data)
# Estimate a regression model.
lm_model_2 <- lm(data = tractor_data,
formula = log(saleprice) ~ horsepower + age + enghours +
diesel + fwd + manual + johndeere +
cab +
spring + summer + winter)
# Output the results to screen.
summary(lm_model_2)
tractor_data <- read_xlsx("tractor_data.xlsx", sheet = "Sales") %>%
left_join(read_xlsx("tractor_data.xlsx", sheet = "Specs")) %>%
left_join(read_xlsx("tractor_data.xlsx", sheet = "Cabs")) %>%
mutate(cab_orig = cab,
cab = ifelse(is.na(cab), 0, cab),
log_saleprice = log(saleprice),
squared_horsepower = horsepower^2)
# Inspect the contents one more time.
summary(tractor_data)
# Estimate a regression model.
lm_model_2 <- lm(data = tractor_data,
formula = log_saleprice ~ horsepower + age + enghours +
diesel + fwd + manual + johndeere +
cab +
spring + summer + winter)
# Output the results to screen.
summary(lm_model_2)
# Estimate a regression model.
lm_model_2 <- lm(data = tractor_data,
formula = log_saleprice ~ horsepower + age + enghours +
diesel + fwd + manual + johndeere +
cab # +
# spring + summer + winter
)
# Output the results to screen.
summary(lm_model_2)
# Estimate a regression model.
lm_model_2 <- lm(data = tractor_data,
formula = log_saleprice ~ horsepower + squared_horsepower +
age + enghours +
diesel + fwd + manual + johndeere +
cab # +
# spring + summer + winter
)
# Output the results to screen.
summary(lm_model_2)
getwd()
type(tractor_data[, 'saleprice'])
class(tractor_data[, 'saleprice'])
unlist(tractor_data[, 'saleprice'])
class(tractor_data[, 'saleprice'])
# Clear workspace.
rm(list=ls(all=TRUE))
library(tidyverse)
library(tidyverse)
# Load required libraries.
# library(name_of_R_package)
install.packages("tidyverse")
# install.packages("tidyverse")
library(readxl)
setwd("~/GitHub/last_github/QMB6316F24/demo_14_tidyverse")
